- name: Fetch metadata
  hosts: all
  tags:
    - always
  tasks:
    - name: Get dpkg arch
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.command: dpkg --print-architecture
      register: _apt_arch
      changed_when: false

    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Stop unattended-upgr
      become: true
      when:
        - ansible_distribution == 'Ubuntu'
        - ansible_facts.services["unattended-upgrades.service"] is defined
      register: unattended_upgr
      ansible.builtin.service:
        name: unattended-upgrades
        state: stopped

    - name: Check if sbctl is installed
      when: ansible_distribution == 'Ubuntu'
      ansible.builtin.stat:
        path: /usr/sbin/sbctl
      register: sbctl_bin

    - name: Get Secure Boot state
      when:
        - ansible_distribution == 'Ubuntu'
        - sbctl_bin.stat.exists
      ansible.builtin.command: sbctl status --json | jq .secure_boot
      register: secure_boot
      changed_when: false

    - name: Set Secure Boot state
      ansible.builtin.set_fact:
        host_secure_boot: "{{ secure_boot.stdout | from_json }}"
      changed_when: false
      when:
        - ansible_distribution == 'Ubuntu'
        - secure_boot.stdout is defined

- name: Set up ident
  hosts: all, !proxmox
  tags: [never, init]

  pre_tasks:
    - name: Provision users
      ansible.builtin.include_role:
        name: rox_users
      with_items: "{{ users }}"
      loop_control:
        loop_var: rox_users_user

    - name: Install Homebrew
      ansible.builtin.include_role:
        name: homebrew
      when: homebrew

    - name: Change hostname
      become: true
      when: set_hostname is defined
      ansible.builtin.hostname:
        name: "{{ set_hostname }}"
      notify:
        - Change hostname in hosts

    - name: Update apt cache
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        update_cache: true
      changed_when: false

  tasks:
    - name: Install packages
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        name: "{{ package_list }}"
        state: present

  handlers:
    - name: Change hostname in hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: ^127\.0\.0\.1 localhost
        line: 127.0.0.1 {{ item }}
        owner: root
        group: root
        mode: "0644"
      with_items:
        - localhost
        - "{{ set_hostname }}"
      notify:
        - Reboot the server

    - name: Reboot the server
      become: true
      ansible.builtin.reboot:
        msg: Reboot initiated by Ansible due to hostname change
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 2
        post_reboot_delay: 30
        test_command: uptime

- name: Set up base
  hosts: all
  tags:
    - base
    - init

  roles:
    - role: geerlingguy.ntp
      become: true
    - role: bodsch.snapd
      become: true
      when: ansible_distribution == 'Ubuntu'
    - role: geerlingguy.security
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
    - role: netplan
      when: netplan_addresses or netplan_custom

- name: Install docker
  hosts:
    # - edge
    - hbd
    - server
    - storey
  tags:
    - docker
    - init
  roles:
    - role: geerlingguy.docker
      become: true
      when: ansible_distribution == 'Ubuntu'

- name: Board specific setup
  hosts: all
  tags:
    - init
    - update
    - raspberry
    - boards
  tasks:
    - name: Include boards
      tags: boards
      ansible.builtin.include_role:
        name: boards
    - name: Include raspberry role
      tags: raspberry
      ansible.builtin.include_role:
        name: raspberry
      when: ansible_facts.kernel.endswith("-raspi")

- name: Provision Storey
  hosts: storey
  tags:
    - storey
    - update
    - init
  roles:
    - role: zfs
    # - role: storey

  tasks:
    - name: Create dir for docker service ZFS override
      ansible.builtin.file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: "0755"

    - name: Create systemd override for Docker to wait for ZFS
      become: true
      ansible.builtin.copy:
        owner: root
        group: root
        mode: "0644"
        content: |
          # Ansible managed
          [Unit]
          Requires=zfs.target
          After=zfs.target
        dest: /etc/systemd/system/docker.service.d/zfs-override.conf
      notify:
        - Restart docker

  handlers:
    - name: Restart docker
      become: true
      ansible.builtin.systemd_service:
        name: docker
        daemon_reload: yes
        state: restarted

- name: Provision Proxmox
  hosts: proxmox
  tags:
    - proxmox
    - update
    - init
  tasks:
    - name: Install packages
      become: true
      ansible.builtin.apt:
        name: "{{ package_list }}"
        state: present

- name: Provision PiHole
  hosts: pihole
  tags:
    - pihole
    - update
    - init
  roles:
    - role: pihole
    - role: pihole_updatelist
    - role: dnsmasq
    - role: unbound

- name: Install ZFS
  hosts: server
  tags: [never, init]
  roles:
    - role: zfs

- name: Install Kubernetes
  any_errors_fatal: true
  hosts: kubernetes
  tags:
    - init
    - kubernetes
    - never
  tasks:
    - name: Include Containerd role
      ansible.builtin.include_role:
        name: geerlingguy.containerd
        apply:
          become: true
    - name: Include Kubernetes role
      ansible.builtin.include_role:
        name: kubernetes

- name: Mount unraid media
  hosts:
    - server
    - node04
  tags:
    - init
    - update

  tasks:
    - name: Get dependencies for NFS
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        name: nfs-common

    - name: Mount unraid media
      become: true
      ansible.posix.mount:
        src: 10.0.0.30:/mnt/user/data/media/
        path: /mnt/user/data/media/
        opts: ro
        state: "{{ 'present' if lookup('file', '/mnt/user/data/media/.test', errors='ignore') else 'mounted' }}"
        fstype: nfs

- name: Update host
  hosts: all
  tags:
    - init
    - update

  tasks:
    # https://www.cyberciti.biz/faq/ansible-apt-update-all-packages-on-ubuntu-debian-linux/
    - name: Update packages
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        update_cache: "true"
        force_apt_get: "true"
        cache_valid_time: 3600
        upgrade: "yes"
        autoremove: "true"

    - name: Remove Ubuntu ESM apt spam
      become: true
      when: ansible_distribution == 'Ubuntu'
      ansible.builtin.copy:
        owner: root
        group: root
        mode: "0644"
        content: |
          # Ansible managed
        dest: /etc/apt/apt.conf.d/20apt-esm-hook.conf

    - name: Remove motd
      become: true
      ansible.builtin.file:
        path: /etc/motd
        state: absent

    - name: Remove update-motd
      become: true
      ansible.builtin.file:
        path: /etc/update-motd.d/{{ item }}
        state: absent
      loop:
        - 00-header
        - 10-help-text
        - 10-uname
        - 50-motd-news
        - 80-livepatch
        - 88-esm-announce
        - 91-contract-ua-esm-status
        - 91-release-upgrade
        - 92-unattended-upgrades
        - 98-reboot-required
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

    - name: Place MoTD
      become: true
      when:
        - ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
        - "'neofetch' in package_list"
      ansible.builtin.copy:
        content: |
          #!/bin/sh
          # Ansible managed

          neofetch
        mode: "0755"
        dest: /etc/update-motd.d/01-neofetch

    - name: Check if a reboot is needed for Debian and Ubuntu boxes
      register: reboot_required_file
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no

    - name: Sign efi binaries
      become: true
      when: host_secure_boot is defined
      ansible.builtin.shell:
        cmd: for file in /boot/efi/*/*/linux /boot/efi/EFI/*/*.efi /boot/efi/EFI/*/*.EFI; do sudo sbctl sign -s $file; done
      changed_when: false

    - name: Reboot the server
      become: true
      throttle: 1
      when: reboot_required_file.stat.exists and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian')
      ansible.builtin.reboot:
        msg: Reboot initiated by Ansible due to kernel updates
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

- name: Cleanup
  hosts: all
  tags:
    - always
  tasks:
    - name: Start unattended-upgr # noqa no-handler
      become: true
      when: unattended_upgr.changed
      ansible.builtin.service:
        name: unattended-upgrades
        state: started
