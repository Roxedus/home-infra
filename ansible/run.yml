- name: Fetch metadata
  hosts: all
  tags:
    - always
  tasks:
    - name: Get dpkg arch
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.command: dpkg --print-architecture
      register: _apt_arch
      changed_when: false

    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Stop unattended-upgr
      become: true
      when:
        - ansible_distribution == 'Ubuntu'
        - ansible_facts.services["unattended-upgrades.service"] is defined
      register: unattended_upgr
      ansible.builtin.service:
        name: unattended-upgrades
        state: stopped

- name: Set up ident
  hosts: all
  tags: [never, init]

  pre_tasks:
    - name: Provision users
      ansible.builtin.include_role:
        name: rox_users
      with_items: "{{ users }}"
      loop_control:
        loop_var: rox_users_user

    - name: Install Homebrew
      ansible.builtin.include_role:
        name: homebrew
      when: homebrew

    - name: Change hostname
      become: true
      when: set_hostname is defined
      ansible.builtin.hostname:
        name: "{{ set_hostname }}"
      notify:
        - Change hostname in hosts

    - name: Update apt cache
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        update_cache: true
      changed_when: false

  tasks:
    - name: Install packages
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        name: "{{ package_list }}"
        state: present

  handlers:
    - name: Change hostname in hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: ^127\.0\.0\.1 localhost
        line: 127.0.0.1 {{ item }}
        owner: root
        group: root
        mode: 0644
      with_items:
        - localhost
        - "{{ set_hostname }}"
      notify:
        - Reboot the server

    - name: Reboot the server
      become: true
      ansible.builtin.reboot:
        msg: Reboot initiated by Ansible due to hostname change
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 2
        post_reboot_delay: 30
        test_command: uptime

- name: Set up base
  hosts: all
  tags:
    - base
    - init

  roles:
    - role: geerlingguy.ntp
      become: true
    - role: bodsch.snapd
      become: true
      when: ansible_distribution == 'Ubuntu'
    - role: geerlingguy.security
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
    # - role: prometheus.prometheus.node_exporter
    #   become: true
    #   when: prom_node_exporter
    - role: netplan
      when: netplan_addresses or netplan_custom

# tasks:
#   - name: Install systemd-journal-upload
#     become: true
#     when: ansible_facts.service_mgr == "systemd" and inventory_hostname not in ['edge']
#     ansible.builtin.apt:
#       name: systemd-journal-remote
#       state: present

#   - name: Create systemd-journal-upload config directory
#     when: ansible_facts.service_mgr == "systemd" and inventory_hostname not in ['edge']
#     become: true
#     ansible.builtin.file:
#       owner: root
#       group: root
#       mode: 0755
#       path: /etc/systemd/journal-upload.conf.d/
#       state: directory

#   - name: Create systemd-journal-remote override
#     become: true
#     when: ansible_facts.service_mgr == "systemd" and inventory_hostname not in ['edge']
#     ansible.builtin.copy:
#       owner: root
#       group: root
#       mode: 0644
#       content: |
#         # Ansible managed
#         [Upload]
#         URL=http://10.0.0.16:19532
#       dest: /etc/systemd/journal-upload.conf.d/url.conf
#     notify:
#       - Restart systemd-journal-upload

#   - name: Make sure systemd-journal-upload is running
#     become: true
#     when: ansible_facts.service_mgr == "systemd" and inventory_hostname not in ['edge']
#     ansible.builtin.systemd_service:
#       state: started
#       name: systemd-journal-upload
#       enabled: true
#       masked: false
#     notify:
#       - Restart systemd-journal-upload

#   - name: Create healthcheck for host
#     when: ansible_facts.service_mgr == "systemd"
#     delegate_to: 127.0.0.1
#     register: local_healthcheck
#     community.healthchecksio.checks:
#       state: present
#       management_api_base_url: "{{ healthchecks_management_url }}/api/v3"
#       management_api_token: "{{ healthchecks_api }}"
#       name: "{{ inventory_hostname | title }} uptime check"
#       channels: "{{ healthchecks_integration }}"
#       unique:
#         - name
#       tags:
#         - ansible
#         - "{{ inventory_hostname | title }}"
#       desc: Ansible host automated uptime check
#       schedule: "{{ healthcheck_schedule_minute }} * * * *"
#       tz: "{{ ntp_timezone }}"
#       grace: 360

#   - name: Create systemd pause healthcheck on shutdown
#     when: ansible_facts.service_mgr == "systemd"
#     become: true
#     ansible.builtin.copy:
#       owner: root
#       group: root
#       mode: 0644
# yamllint disable rule:line-length
#       content: |
#         # Ansible managed
#         [Unit]
#         Description=Pause healthcheck on shutdown
#         DefaultDependencies=no
#         After=final.target

#         [Service]
#         Type=oneshot
#         ExecStart=/usr/bin/curl -sSm 10 --retry 1 -X POST --header "X-Api-Key: {{ healthchecks_api }}" --data "" {{ healthchecks_management_url }}/api/v3/checks/{{ local_healthcheck.uuid }}/pause

#         [Install]
#         WantedBy=final.target
# yamllint enable rule:line-length
#       dest: /etc/systemd/system/healthcheck-shutdown.service
#     notify:
#       - Enable healthcheck pause service

#   - name: Create systemd service for healthcheck
#     when: ansible_facts.service_mgr == "systemd"
#     become: true
#     ansible.builtin.copy:
#       owner: root
#       group: root
#       mode: 0644
#       content: |
#         # Ansible managed
#         [Unit]
#         Description=Runs curl to ping healthchecks
#         Wants=healthcheck.timer

#         [Service]
#         Type=oneshot
#         ExecStart=/usr/bin/curl -sSm 10 --retry 5 {{ healthchecks_management_url }}/ping/{{ local_healthcheck.uuid }}

#         [Install]
#         WantedBy=multi-user.target
#       dest: /etc/systemd/system/healthcheck.service
#     notify:
#       - Restart healthcheck timer

#   - name: Create systemd timer for healthcheck
#     when: ansible_facts.service_mgr == "systemd"
#     become: true
#     ansible.builtin.copy:
#       owner: root
#       group: root
#       mode: 0644
#       content: |
#         # Ansible managed
#         [Unit]
#         Description=Schedules healthcheck
#         Requires=healthcheck.service

#         [Timer]
#         Unit=healthcheck.service
#         OnCalendar=*-*-* *:{{ healthcheck_schedule_minute }}:00

#         [Install]
#         WantedBy=timers.target
#       dest: /etc/systemd/system/healthcheck.timer
#     notify:
#       - Restart healthcheck timer

# handlers:
#   - name: Restart systemd-journal-upload
#     become: true
#     ansible.builtin.systemd_service:
#       name: systemd-journal-upload
#       state: started

#   - name: Restart healthcheck timer
#     become: true
#     ansible.builtin.systemd_service:
#       name: healthcheck.timer
#       state: started
#       enabled: true
#       daemon_reload: true

#   - name: Enable healthcheck pause service
#     become: true
#     ansible.builtin.systemd_service:
#       name: healthcheck-shutdown.service
#       enabled: true
#       state: started
#       daemon_reload: true

- name: Install docker
  hosts:
    # - edge
    - hbd
    - server
  tags:
    - docker
    - init
  roles:
    - role: geerlingguy.docker
      become: true
      when: ansible_distribution == 'Ubuntu'

- name: Board specific setup
  hosts: all
  tags:
    - init
    - update
    - raspberry
    - boards
  tasks:
    - name: Include boards
      tags: boards
      ansible.builtin.include_role:
        name: boards
    - name: Include raspberry role
      tags: raspberry
      ansible.builtin.include_role:
        name: raspberry
      when: ansible_facts.kernel.endswith("-raspi")

# - name: Provision Edge server
#   hosts: edge
#   tags:
#     - monitor
#     - update
#     - init

#   tasks:
#     - name: Create journald remote directory
#       when: ansible_distribution == 'Ubuntu'
#       become: true
#       ansible.builtin.file:
#         owner: 115
#         group: 120
#         mode: 0755
#         path: /var/log/journal/remote/
#         state: directory

#     - name: Create systemd-journal-remote override directory
#       when: ansible_distribution == 'Ubuntu'
#       become: true
#       ansible.builtin.file:
#         owner: root
#         group: root
#         mode: 0755
#         path: /etc/systemd/system/systemd-journal-remote.service.d/
#         state: directory

#     - name: Create systemd-journal-remote override
#       become: true
#       when: ansible_distribution == 'Ubuntu'
#       ansible.builtin.copy:
#         owner: root
#         group: root
#         mode: 0644
#         content: |
#           # Ansible managed
#           [Service]
#           ExecStart=
#           ExecStart=/lib/systemd/systemd-journal-remote --listen-http=-3 --output=/var/log/journal/remote/
#         dest: /etc/systemd/system/systemd-journal-remote.service.d/override.conf
#       notify:
#         - Restart systemd-journal-remote

#     - name: Make sure systemd-journal-remote is running
#       ansible.builtin.systemd_service:
#         state: started
#         name: systemd-journal-remote
#         enabled: true
#         masked: false
#       notify:
#         - Restart systemd-journal-remote

#   roles:
#     - role: prometheus.prometheus.prometheus
#       vars:
#         prometheus_scrape_configs:
#           - job_name: prometheus
#             metrics_path: "{{ prometheus_metrics_path }}"
#             static_configs:
#               - targets:
#                   - "{{ ansible_fqdn | default(ansible_host) | default('localhost') }}:9090"
#           - job_name: node
#             file_sd_configs:
#               - files:
#                   - "{{ prometheus_config_dir }}/file_sd/node.yml"
#           - job_name: nodes
#             metrics_path: /metrics
#             static_configs:
#               - targets:
#               # "{{ ((ansible_play_hosts_all | map('extract', hostvars, ['ansible_default_ipv4', 'address'])) | product([':9100'])) | map('join') }}"
#                   - edge:9100
#                   - server:9100
#                   - pihole1:9100
#                   - pihole2:9100
#           - job_name: docker
#             metrics_path: /metrics
#             static_configs:
#               - targets:

#   handlers:
#     - name: Restart systemd-journal-remote
#       become: true
#       ansible.builtin.service:
#         name: systemd-journal-remote
#         state: restarted
#         enabled: true

# - name: Configure Edge server
#   hosts: edge
#   tags:
#     - edge
#     - update
#   roles:
#     - role: edge

- name: Provision PiHole
  hosts: pihole
  tags:
    - pihole
    - update
    - init
  roles:
    - role: pihole
    - role: pihole_updatelist
    - role: dnsmasq
    - role: unbound

- name: Install ZFS
  hosts: server
  tags: [never, init]
  roles:
    - role: zfs

- name: Install Kubernetes
  any_errors_fatal: true
  hosts: kubernetes
  tags:
    - init
    - kubernetes
    - never
  tasks:
    - name: Include Containerd role
      ansible.builtin.include_role:
        name: geerlingguy.containerd
        apply:
          become: true
    - name: Include Kubernetes role
      ansible.builtin.include_role:
        name: kubernetes

- name: Mount unraid media
  hosts:
    - server
    - node04
  tags:
    - init
    - update

  tasks:
    - name: Get dependencies for NFS
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        name: nfs-common

    - name: Mount unraid media
      become: true
      ansible.posix.mount:
        src: 10.0.0.30:/mnt/user/data/media/
        path: /mnt/user/data/media/
        opts: ro
        state: "{{ 'present' if lookup('file', '/mnt/user/data/media/.test', errors='ignore') else 'mounted' }}"
        fstype: nfs

- name: Update host
  hosts: all
  tags:
    - init
    - update

  tasks:
    # https://www.cyberciti.biz/faq/ansible-apt-update-all-packages-on-ubuntu-debian-linux/
    - name: Update packages
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.apt:
        update_cache: "true"
        force_apt_get: "true"
        cache_valid_time: 3600
        upgrade: "yes"
        autoremove: "true"

    - name: Remove Ubuntu ESM apt spam
      become: true
      when: ansible_distribution == 'Ubuntu'
      ansible.builtin.copy:
        owner: root
        group: root
        mode: 0644
        content: |
          # Ansible managed
        dest: /etc/apt/apt.conf.d/20apt-esm-hook.conf

    - name: Remove motd
      become: true
      ansible.builtin.file:
        path: /etc/motd
        state: absent

    - name: Remove update-motd
      become: true
      ansible.builtin.file:
        path: /etc/update-motd.d/{{ item }}
        state: absent
      loop:
        - 00-header
        - 10-help-text
        - 10-uname
        - 50-motd-news
        - 80-livepatch
        - 88-esm-announce
        - 91-contract-ua-esm-status
        - 91-release-upgrade
        - 92-unattended-upgrades
        - 98-reboot-required
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

    - name: Place MoTD
      become: true
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.copy:
        content: |
          #!/bin/sh
          # Ansible managed

          neofetch
        mode: 0755
        dest: /etc/update-motd.d/01-neofetch

    - name: Check if a reboot is needed for Debian and Ubuntu boxes
      register: reboot_required_file
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no

    - name: Reboot the server
      become: true
      throttle: 1
      when: reboot_required_file.stat.exists and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian')
      ansible.builtin.reboot:
        msg: Reboot initiated by Ansible due to kernel updates
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

- name: Cleanup
  hosts: all
  tags:
    - always
  tasks:
    - name: Start unattended-upgr # noqa no-handler
      become: true
      when: unattended_upgr.changed
      ansible.builtin.service:
        name: unattended-upgrades
        state: started
